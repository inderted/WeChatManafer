// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;
using WxManager.EntityFrameworkCore;

namespace WxManager.Migrations
{
    [DbContext(typeof(WxManagerMigrationsDbContext))]
    partial class WxManagerMigrationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.MySql)
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("ApplicationName");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("BrowserInfo");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ClientId");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ClientIpAddress");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ClientName");

                    b.Property<string>("Comments")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Comments");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("CorrelationId");

                    b.Property<string>("Exceptions")
                        .HasMaxLength(4000)
                        .HasColumnType("longtext")
                        .HasColumnName("Exceptions");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("HttpMethod");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("int")
                        .HasColumnName("HttpStatusCode");

                    b.Property<Guid?>("ImpersonatorTenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ImpersonatorTenantId");

                    b.Property<Guid?>("ImpersonatorUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ImpersonatorUserId");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.Property<string>("TenantName")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Url");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId", "ExecutionTime");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AuditLogId");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ExecutionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("MethodName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("MethodName");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("Parameters");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("ServiceName");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");

                    b.ToTable("AbpAuditLogActions");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AuditLogId");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ChangeTime");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("ChangeType");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("EntityId");

                    b.Property<Guid?>("EntityTenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EntityTypeFullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("EntityTypeFullName");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EntityChangeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("NewValue");

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("OriginalValue");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("PropertyName");

                    b.Property<string>("PropertyTypeFullName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("PropertyTypeFullName");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Volo.Abp.BackgroundJobs.BackgroundJobRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsAbandoned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576)
                        .HasColumnType("longtext");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)15);

                    b.Property<short>("TryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpFeatureValues");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Regex")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("RegexDescription")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AbpClaimTypes");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityLinkUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("SourceTenantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SourceUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TargetTenantId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId")
                        .IsUnique();

                    b.ToTable("AbpLinkUsers");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsDefault");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsPublic");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsStatic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentitySecurityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Action")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<string>("Identity")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.Property<string>("TenantName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Action");

                    b.HasIndex("TenantId", "ApplicationName");

                    b.HasIndex("TenantId", "Identity");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpSecurityLogs");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("EmailConfirmed");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsExternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsExternal");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NormalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NormalizedUserName");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("SecurityStamp");

                    b.Property<string>("Surname")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Surname");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName");

                    b.HasIndex("UserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(196)
                        .HasColumnType("varchar(196)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("UserId", "LoginProvider");

                    b.HasIndex("LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                {
                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("OrganizationUnitId", "UserId");

                    b.HasIndex("UserId", "OrganizationUnitId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("Code");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("DisplayName");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ParentId");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                {
                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("OrganizationUnitId", "RoleId");

                    b.HasIndex("RoleId", "OrganizationUnitId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpPermissionGrants");
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("TenantId", "Name");

                    b.ToTable("AbpTenantConnectionStrings");
                });

            modelBuilder.Entity("WxManager.WeChatManager.ApprovalDetails.ApprovalDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApprovalDetailStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalRuleId")
                        .HasColumnType("int");

                    b.Property<int?>("BeforeApproverId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CurrentApproverId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Extra")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NextApprovalDetailName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WeChatMaterialNewsId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatMaterialNewsVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalRuleId");

                    b.ToTable("ApprovalDetail");
                });

            modelBuilder.Entity("WxManager.WeChatManager.ApprovalGroups.ApprovalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApprovalGroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ApprovalGroup");
                });

            modelBuilder.Entity("WxManager.WeChatManager.ApprovalGroups.ApprovalGroupInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApprovalGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalGroupId");

                    b.ToTable("ApprovalGroupInfo");
                });

            modelBuilder.Entity("WxManager.WeChatManager.ApprovalRules.ApprovalRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApprovalGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalRuleStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovalRuleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RuleJson")
                        .HasColumnType("longtext");

                    b.Property<int?>("UpdateByCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateOnUtc")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalGroupId");

                    b.ToTable("ApprovalRule");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatAnalysis.WeChatStatisticsArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddToFavCount")
                        .HasColumnType("int");

                    b.Property<int?>("AddToFavUser")
                        .HasColumnType("int");

                    b.Property<int>("DataSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageReadUser")
                        .HasColumnType("int");

                    b.Property<string>("MsgId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("OriPageReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("OriPageReadUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("RefDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RefHour")
                        .HasColumnType("int");

                    b.Property<int?>("ShareCount")
                        .HasColumnType("int");

                    b.Property<int?>("ShareScene")
                        .HasColumnType("int");

                    b.Property<int?>("ShareUser")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("UserSource")
                        .HasColumnType("int");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeChatStatisticsArticle");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatAnalysis.WeChatStatisticsArticleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddToFavCount")
                        .HasColumnType("int");

                    b.Property<int?>("AddToFavUser")
                        .HasColumnType("int");

                    b.Property<int?>("FeedShareFromFeedCnt")
                        .HasColumnType("int");

                    b.Property<int?>("FeedShareFromFeedUser")
                        .HasColumnType("int");

                    b.Property<int?>("FeedShareFromOtherCnt")
                        .HasColumnType("int");

                    b.Property<int?>("FeedShareFromOtherUser")
                        .HasColumnType("int");

                    b.Property<int?>("FeedShareFromSessionCnt")
                        .HasColumnType("int");

                    b.Property<int?>("FeedShareFromSessionUser")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageFromFeedReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageFromFeedReadUser")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageFromFriendsReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageFromFriendsReadUser")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageFromHistMsgReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageFromHistMsgReadUser")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageFromOtherReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageFromOtherReadUser")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageFromSessionReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageFromSessionReadUser")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageReadUser")
                        .HasColumnType("int");

                    b.Property<int?>("OriPageReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("OriPageReadUser")
                        .HasColumnType("int");

                    b.Property<int?>("ShareCount")
                        .HasColumnType("int");

                    b.Property<int?>("ShareUser")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TargetUser")
                        .HasColumnType("int");

                    b.Property<int>("WeChatStatisticsArticleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatStatisticsArticleId");

                    b.ToTable("WeChatStatisticsArticleDetail");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatAnalysis.WeChatStatisticsInterface", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CallbackCount")
                        .HasColumnType("int");

                    b.Property<int>("DataSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("FailCount")
                        .HasColumnType("int");

                    b.Property<int?>("MaxTimeCost")
                        .HasColumnType("int");

                    b.Property<DateTime>("RefDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RefHour")
                        .HasColumnType("int");

                    b.Property<int?>("TotalTimeCost")
                        .HasColumnType("int");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeChatStatisticsInterface");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatAnalysis.WeChatStatisticsMsg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CountInterval")
                        .HasColumnType("int");

                    b.Property<int>("DataSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("IntPageReadCount")
                        .HasColumnType("int");

                    b.Property<int?>("MsgCount")
                        .HasColumnType("int");

                    b.Property<int?>("MsgType")
                        .HasColumnType("int");

                    b.Property<int?>("MsgUser")
                        .HasColumnType("int");

                    b.Property<int?>("OriPageReadUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("RefDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RefHour")
                        .HasColumnType("int");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeChatStatisticsMsg");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatAnalysis.WeChatStatisticsUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CancelUser")
                        .HasColumnType("int");

                    b.Property<int?>("CumulateUser")
                        .HasColumnType("int");

                    b.Property<int>("DataSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("NewUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("RefDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserSource")
                        .HasColumnType("int");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeChatStatisticsUser");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatAutoReplys.WeChatAutoReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullKeyWords")
                        .HasColumnType("longtext");

                    b.Property<string>("HalfKeyWords")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSubscribe")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ReplayTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatConfigId");

                    b.ToTable("WeChatAutoReply");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatConfigs.WeChatConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EncodingAESKey")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("NotifyTemplateId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("WeChatAppId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("WeChatAppSecret")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("WeChatId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("WeChatName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("WeChatToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("WeChatConfig");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMaterial.WeChatMaterialNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ApprovalRuleId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("WeChatConfigId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatMaterialNewsStatusId")
                        .HasColumnType("int");

                    b.Property<string>("WeChatMediaId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalRuleId");

                    b.ToTable("WeChatMaterialNews");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMaterial.WeChatMaterialNewsArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<string>("ContentSourceUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Digest")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("NeedOpenComment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OnlyFansCanComment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowCoverPic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ThumbMediaId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.Property<int>("WeChatMaterialNewsId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatMaterialNewsVersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatMaterialNewsVersionId");

                    b.ToTable("WeChatMaterialNewsArticle");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMaterial.WeChatMaterialNewsVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.Property<int>("WeChatMaterialNewsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatMaterialNewsId");

                    b.ToTable("WeChatMaterialNewsVersion");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMedias.WeChatMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Introduction")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MediaId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatConfigId");

                    b.ToTable("WeChatMedia");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMedias.WeChatNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConetntSourceUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Digest")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("NeedOpenComment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OnlyFansCanComment")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowCoverPic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ThumbMediaId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("WeChatMediaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatMediaId");

                    b.ToTable("WeChatNews");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMedias.WeChatTempMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FromUserOpenId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MediaId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UploadMediaFileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.Property<int?>("WeChatMessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatConfigId");

                    b.ToTable("WeChatTempMedia");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMenus.WeChatMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MenuId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("PersonaliseMenu")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatConfigId");

                    b.ToTable("WeChatMenu");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMessages.WeChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MsgType")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserOpenId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatConfigId");

                    b.HasIndex("WeChatUserId");

                    b.ToTable("WeChatMessage");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMessages.WeChatMessageNotify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerOpenId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatConfigId");

                    b.ToTable("WeChatMessageNotify");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatQrCodes.WeChatQrCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActionNameId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Expire")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("SceneId")
                        .HasColumnType("int");

                    b.Property<string>("SceneStr")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ticket")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Url")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.Property<int?>("WeChatTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatConfigId");

                    b.HasIndex("WeChatTagId");

                    b.ToTable("WeChatQrCode");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatQrCodes.WeChatQrCodeRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OpenId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ScanTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatQrCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatQrCodeId");

                    b.ToTable("WeChatQrCodeRecord");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatSendRecords.WeChatSendRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMsg")
                        .HasColumnType("longtext");

                    b.Property<string>("MediaId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("MsgDataId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MsgId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MsgStatus")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("MsgTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.Property<int?>("WeChatTagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatConfigId");

                    b.ToTable("WeChatSendRecord");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatSyncRecords.WeChatSyncRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int>("RecordTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SyncQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SyncStatusId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeChatConfigId");

                    b.ToTable("WeChatSyncRecord");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatTags.WeChatTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeChatTag");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatToDoLists.WeChatToDoList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClosedByCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ClosedNote")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ClosedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedByCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Important")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("OverTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ToDoStatusId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeChatToDoList");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatUsers.WeChatUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("BlackUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FirstSubscribeTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("HeadImgUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Language")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("NickName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("OpenId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Remark")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<bool>("Subscribe")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("SubscribeTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UnSubscribeTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UnionId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WeChatConfigId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeChatUser");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatUsers.WeChatUserTag", b =>
                {
                    b.Property<int>("WeChatTagId")
                        .HasColumnType("int");

                    b.Property<int>("WeChatUserId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("WeChatTagId", "WeChatUserId");

                    b.HasIndex("WeChatUserId");

                    b.ToTable("WeChatUser_WeChatTag_Mapping");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("Actions")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.HasOne("Volo.Abp.TenantManagement.Tenant", null)
                        .WithMany("ConnectionStrings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WxManager.WeChatManager.ApprovalDetails.ApprovalDetail", b =>
                {
                    b.HasOne("WxManager.WeChatManager.ApprovalRules.ApprovalRule", "ApprovalRule")
                        .WithMany("ApprovalDetails")
                        .HasForeignKey("ApprovalRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalRule");
                });

            modelBuilder.Entity("WxManager.WeChatManager.ApprovalGroups.ApprovalGroupInfo", b =>
                {
                    b.HasOne("WxManager.WeChatManager.ApprovalGroups.ApprovalGroup", "ApprovalGroup")
                        .WithMany("ApprovalGroupInfos")
                        .HasForeignKey("ApprovalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalGroup");
                });

            modelBuilder.Entity("WxManager.WeChatManager.ApprovalRules.ApprovalRule", b =>
                {
                    b.HasOne("WxManager.WeChatManager.ApprovalGroups.ApprovalGroup", "ApprovalGroup")
                        .WithMany()
                        .HasForeignKey("ApprovalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalGroup");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatAnalysis.WeChatStatisticsArticleDetail", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatAnalysis.WeChatStatisticsArticle", "WeChatStatisticsArticle")
                        .WithMany("StatisticsArticleDetails")
                        .HasForeignKey("WeChatStatisticsArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatStatisticsArticle");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatAutoReplys.WeChatAutoReply", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatConfigs.WeChatConfig", "WeChatConfig")
                        .WithMany()
                        .HasForeignKey("WeChatConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatConfig");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMaterial.WeChatMaterialNews", b =>
                {
                    b.HasOne("WxManager.WeChatManager.ApprovalRules.ApprovalRule", "ApprovalRule")
                        .WithMany()
                        .HasForeignKey("ApprovalRuleId");

                    b.Navigation("ApprovalRule");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMaterial.WeChatMaterialNewsArticle", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatMaterial.WeChatMaterialNewsVersion", "WeChatMaterialNewsVersion")
                        .WithMany("WeChatMaterialNewsArticles")
                        .HasForeignKey("WeChatMaterialNewsVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatMaterialNewsVersion");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMaterial.WeChatMaterialNewsVersion", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatMaterial.WeChatMaterialNews", "WeChatMaterialNews")
                        .WithMany("WeChatMaterialNewsVersions")
                        .HasForeignKey("WeChatMaterialNewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatMaterialNews");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMedias.WeChatMedia", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatConfigs.WeChatConfig", "WeChatConfig")
                        .WithMany()
                        .HasForeignKey("WeChatConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatConfig");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMedias.WeChatNews", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatMedias.WeChatMedia", "WeChatMedia")
                        .WithMany("WeChatNewsItems")
                        .HasForeignKey("WeChatMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatMedia");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMedias.WeChatTempMedia", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatConfigs.WeChatConfig", "WeChatConfig")
                        .WithMany()
                        .HasForeignKey("WeChatConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatConfig");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMenus.WeChatMenu", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatConfigs.WeChatConfig", "WeChatConfig")
                        .WithMany()
                        .HasForeignKey("WeChatConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatConfig");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMessages.WeChatMessage", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatConfigs.WeChatConfig", "WeChatConfig")
                        .WithMany()
                        .HasForeignKey("WeChatConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WxManager.WeChatManager.WeChatUsers.WeChatUser", "WeChatUser")
                        .WithMany("WeChatMessages")
                        .HasForeignKey("WeChatUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatConfig");

                    b.Navigation("WeChatUser");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMessages.WeChatMessageNotify", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatConfigs.WeChatConfig", "WeChatConfig")
                        .WithMany()
                        .HasForeignKey("WeChatConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatConfig");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatQrCodes.WeChatQrCode", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatConfigs.WeChatConfig", "WeChatConfig")
                        .WithMany()
                        .HasForeignKey("WeChatConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WxManager.WeChatManager.WeChatTags.WeChatTag", "WeChatTag")
                        .WithMany()
                        .HasForeignKey("WeChatTagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("WeChatConfig");

                    b.Navigation("WeChatTag");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatQrCodes.WeChatQrCodeRecord", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatQrCodes.WeChatQrCode", "WeChatQrCode")
                        .WithMany()
                        .HasForeignKey("WeChatQrCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatQrCode");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatSendRecords.WeChatSendRecord", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatConfigs.WeChatConfig", "WeChatConfig")
                        .WithMany()
                        .HasForeignKey("WeChatConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatConfig");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatSyncRecords.WeChatSyncRecord", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatConfigs.WeChatConfig", "WeChatConfig")
                        .WithMany()
                        .HasForeignKey("WeChatConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatConfig");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatUsers.WeChatUserTag", b =>
                {
                    b.HasOne("WxManager.WeChatManager.WeChatTags.WeChatTag", "WeChatTag")
                        .WithMany("WeChatUserTags")
                        .HasForeignKey("WeChatTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WxManager.WeChatManager.WeChatUsers.WeChatUser", "WeChatUser")
                        .WithMany("WeChatUserTags")
                        .HasForeignKey("WeChatUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeChatTag");

                    b.Navigation("WeChatUser");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("EntityChanges");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Navigation("PropertyChanges");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("OrganizationUnits");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
                {
                    b.Navigation("ConnectionStrings");
                });

            modelBuilder.Entity("WxManager.WeChatManager.ApprovalGroups.ApprovalGroup", b =>
                {
                    b.Navigation("ApprovalGroupInfos");
                });

            modelBuilder.Entity("WxManager.WeChatManager.ApprovalRules.ApprovalRule", b =>
                {
                    b.Navigation("ApprovalDetails");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatAnalysis.WeChatStatisticsArticle", b =>
                {
                    b.Navigation("StatisticsArticleDetails");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMaterial.WeChatMaterialNews", b =>
                {
                    b.Navigation("WeChatMaterialNewsVersions");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMaterial.WeChatMaterialNewsVersion", b =>
                {
                    b.Navigation("WeChatMaterialNewsArticles");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatMedias.WeChatMedia", b =>
                {
                    b.Navigation("WeChatNewsItems");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatTags.WeChatTag", b =>
                {
                    b.Navigation("WeChatUserTags");
                });

            modelBuilder.Entity("WxManager.WeChatManager.WeChatUsers.WeChatUser", b =>
                {
                    b.Navigation("WeChatMessages");

                    b.Navigation("WeChatUserTags");
                });
#pragma warning restore 612, 618
        }
    }
}
